---
// Dashboard simplifi√© pour Syst√®me Viral
// Affiche seulement : UTMs, Proportion avatars, Taux conversion optin
---

<!doctype html>
<html lang="fr">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Dashboard - Syst√®me Viral</title>
        <link rel="icon" type="image/x-icon" href="/favicon.ico" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
        
        <style>
            :root {
                --bg: #000000;
                --bg-card: #0a0a0a;
                --text: #ffffff;
                --text-secondary: #bfbfbf;
                --accent: #00dc82;
                --border: rgba(255, 255, 255, 0.06);
            }
            
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: "Inter", sans-serif;
                background: var(--bg);
                color: var(--text);
                min-height: 100vh;
                padding: 40px 20px;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
            }
            
            h1 {
                font-size: 2.5rem;
                margin-bottom: 40px;
                text-align: center;
            }
            
            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 24px;
                margin-bottom: 40px;
            }
            
            .stat-card {
                background: var(--bg-card);
                padding: 32px;
                border-radius: 16px;
                border: 1px solid var(--border);
            }
            
            .stat-label {
                font-size: 0.9rem;
                color: var(--text-secondary);
                margin-bottom: 12px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            .stat-value {
                font-size: 3rem;
                font-weight: 800;
                color: var(--accent);
                line-height: 1;
            }
            
            .section {
                background: var(--bg-card);
                padding: 32px;
                border-radius: 16px;
                border: 1px solid var(--border);
                margin-bottom: 30px;
            }
            
            .section-title {
                font-size: 1.5rem;
                margin-bottom: 24px;
                color: var(--accent);
            }
            
            .source-item {
                display: flex;
                justify-content: space-between;
                padding: 16px 0;
                border-bottom: 1px solid var(--border);
            }
            
            .source-item:last-child {
                border-bottom: none;
            }
            
            .avatar-stats {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 16px;
            }
            
            .avatar-card {
                text-align: center;
                padding: 24px;
                background: rgba(0, 220, 130, 0.05);
                border: 1px solid rgba(0, 220, 130, 0.2);
                border-radius: 12px;
            }
            
            .avatar-name {
                font-size: 0.85rem;
                color: var(--text-secondary);
                margin-bottom: 8px;
            }
            
            .avatar-count {
                font-size: 2rem;
                font-weight: 800;
                color: var(--accent);
            }
            
            .filters {
                background: var(--bg-card);
                padding: 24px;
                border-radius: 16px;
                margin-bottom: 30px;
                border: 1px solid var(--border);
                display: flex;
                gap: 16px;
                align-items: end;
                flex-wrap: wrap;
            }
            
            .filter-group {
                display: flex;
                flex-direction: column;
                gap: 8px;
                flex: 1;
                min-width: 200px;
            }
            
            .filter-group label {
                font-size: 0.85rem;
                color: var(--text-secondary);
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            .filter-group input {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 12px;
                color: var(--text);
                font-size: 0.95rem;
            }
            
            .filter-btn {
                background: var(--accent);
                color: var(--bg);
                border: none;
                padding: 12px 32px;
                border-radius: 8px;
                font-weight: 700;
                font-size: 0.95rem;
                cursor: pointer;
                transition: all 0.2s;
            }
            
            .filter-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 20px rgba(0, 220, 130, 0.3);
            }
            
            .loading {
                text-align: center;
                padding: 40px;
                color: var(--text-secondary);
            }
            
            .error {
                background: rgba(255, 68, 68, 0.1);
                border: 1px solid rgba(255, 68, 68, 0.3);
                padding: 24px;
                border-radius: 12px;
                color: #ff4444;
            }
        </style>
    </head>
    
    <body>
        <div class="container">
            <h1>üìä Dashboard Syst√®me Viral</h1>
            
            <div class="filters">
                <div class="filter-group">
                    <label for="date-from">Date d√©but</label>
                    <input type="date" id="date-from" />
                </div>
                <div class="filter-group">
                    <label for="date-to">Date fin</label>
                    <input type="date" id="date-to" />
                </div>
                <button class="filter-btn" onclick="applyFilters()">Appliquer</button>
            </div>
            
            <div id="stats-container">
                <div class="loading">Chargement...</div>
            </div>
            
            <div id="sources-container">
                <div class="loading">Chargement des sources...</div>
            </div>
            
            <div id="avatars-container">
                <div class="loading">Chargement des avatars...</div>
            </div>
        </div>
        
        <script>
            let dateFilter = { from: null, to: null };
            
            function getDateFilter() {
                const fromInput = document.getElementById("date-from");
                const toInput = document.getElementById("date-to");
                return {
                    from: fromInput.value || null,
                    to: toInput.value || null,
                };
            }
            
            function filterByDate(data, from, to) {
                if (!from && !to) return data;
                
                const fromDate = from ? new Date(from) : null;
                const toDate = to ? new Date(to + "T23:59:59") : null;
                
                return data.filter(item => {
                    const itemDate = new Date(item.timestamp);
                    if (fromDate && itemDate < fromDate) return false;
                    if (toDate && itemDate > toDate) return false;
                    return true;
                });
            }
            
            async function loadData() {
                try {
                    const response = await fetch("/.netlify/functions/get-journeys");
                    const data = await response.json();
                    
                    const allEvents = data.journeys.flatMap(j => j.steps || []);
                    const filteredEvents = filterByDate(allEvents, dateFilter.from, dateFilter.to);
                    
                    displayStats(filteredEvents);
                    displaySources(filteredEvents);
                    displayAvatars(filteredEvents);
                    
                } catch (error) {
                    document.getElementById("stats-container").innerHTML = 
                        `<div class="error">Erreur: ${error.message}</div>`;
                }
            }
            
            function displayStats(events) {
                const totalVisits = events.length;
                const optins = events.filter(e => e.event === 'optin');
                const optinRate = totalVisits > 0 ? ((optins.length / totalVisits) * 100).toFixed(1) : 0;
                
                document.getElementById("stats-container").innerHTML = `
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-label">Visites Total</div>
                            <div class="stat-value">${totalVisits}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Optins</div>
                            <div class="stat-value">${optins.length}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Taux Conversion</div>
                            <div class="stat-value">${optinRate}%</div>
                        </div>
                    </div>
                `;
            }
            
            function displaySources(events) {
                const sources = {};
                
                events.forEach(event => {
                    const source = event.utm_source || 'direct';
                    if (!sources[source]) {
                        sources[source] = 0;
                    }
                    sources[source]++;
                });
                
                const sourcesArray = Object.entries(sources)
                    .sort((a, b) => b[1] - a[1])
                    .map(([name, count]) => ({ name, count }));
                
                document.getElementById("sources-container").innerHTML = `
                    <div class="section">
                        <h2 class="section-title">Sources de Trafic (UTM)</h2>
                        ${sourcesArray.map(s => `
                            <div class="source-item">
                                <span>${s.name}</span>
                                <span style="color: var(--accent); font-weight: 700;">${s.count}</span>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            function displayAvatars(events) {
                const avatars = {
                    'employe-frustre': 0,
                    'influenceur-fauche': 0,
                    'entrepreneur-invisible': 0
                };
                
                events.filter(e => e.event === 'avatar_click').forEach(event => {
                    const avatar = event.data?.avatar;
                    if (avatar && avatars[avatar]) {
                        avatars[avatar]++;
                    }
                });
                
                document.getElementById("avatars-container").innerHTML = `
                    <div class="section">
                        <h2 class="section-title">Proportion des 3 Avatars</h2>
                        <div class="avatar-stats">
                            <div class="avatar-card">
                                <div class="avatar-name">Employ√© frustr√©</div>
                                <div class="avatar-count">${avatars['employe-frustre']}</div>
                            </div>
                            <div class="avatar-card">
                                <div class="avatar-name">Influenceur fauch√©</div>
                                <div class="avatar-count">${avatars['influenceur-fauche']}</div>
                            </div>
                            <div class="avatar-card">
                                <div class="avatar-name">Entrepreneur invisible</div>
                                <div class="avatar-count">${avatars['entrepreneur-invisible']}</div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            function applyFilters() {
                dateFilter = getDateFilter();
                loadData();
            }
            
            // Charger au d√©marrage
            loadData();
            
            // Recharger toutes les 10 secondes
            setInterval(loadData, 10000);
        </script>
    </body>
</html>
