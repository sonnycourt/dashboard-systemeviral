---
// Dashboard simplifiÃ© pour SystÃ¨me Viral
// Affiche seulement : UTMs, Proportion avatars, Taux conversion optin
---

<!doctype html>
<html lang="fr">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Dashboard - SystÃ¨me Viral</title>
        <link rel="icon" type="image/x-icon" href="/favicon.ico" />
        <link
            href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap"
            rel="stylesheet"
        />

        <!-- Chart.js pour les graphiques -->
        <script
            src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"
        ></script>

        <style>
            :root {
                --bg: #000000;
                --bg-card: #0a0a0a;
                --text: #ffffff;
                --text-secondary: #bfbfbf;
                --accent: #00dc82;
                --border: rgba(255, 255, 255, 0.06);
            }

            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: "Inter", sans-serif;
                background: var(--bg);
                color: var(--text);
                min-height: 100vh;
                padding: 40px 20px;
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
            }

            h1 {
                font-size: 2.5rem;
                margin-bottom: 40px;
                text-align: center;
            }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 24px;
                margin-bottom: 40px;
            }

            .stat-card {
                background: var(--bg-card);
                padding: 32px;
                border-radius: 16px;
                border: 1px solid var(--border);
            }

            .stat-label {
                font-size: 0.9rem;
                color: var(--text-secondary);
                margin-bottom: 12px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .stat-value {
                font-size: 3rem;
                font-weight: 800;
                color: var(--accent);
                line-height: 1;
            }

            .section {
                background: var(--bg-card);
                padding: 32px;
                border-radius: 16px;
                border: 1px solid var(--border);
                margin-bottom: 30px;
            }

            .section-title {
                font-size: 1.5rem;
                margin-bottom: 24px;
                color: var(--accent);
            }

            .source-item {
                display: flex;
                justify-content: space-between;
                padding: 16px 0;
                border-bottom: 1px solid var(--border);
            }

            .source-item:last-child {
                border-bottom: none;
            }

            .avatar-stats {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 16px;
            }

            .avatar-card {
                text-align: center;
                padding: 24px;
                background: rgba(0, 220, 130, 0.05);
                border: 1px solid rgba(0, 220, 130, 0.2);
                border-radius: 12px;
            }

            .avatar-name {
                font-size: 0.85rem;
                color: var(--text-secondary);
                margin-bottom: 8px;
            }

            .avatar-count {
                font-size: 2rem;
                font-weight: 800;
                color: var(--accent);
            }

            .chart-container {
                width: 100%;
                max-width: 500px;
                margin: 0 auto;
                height: 300px;
            }

            .utm-links {
                display: flex;
                flex-direction: column;
                gap: 16px;
                margin-top: 24px;
            }

            .utm-link-item {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 16px;
                background: rgba(0, 220, 130, 0.05);
                border: 1px solid rgba(0, 220, 130, 0.2);
                border-radius: 8px;
                transition: all 0.2s;
            }

            .utm-link-item:hover {
                background: rgba(0, 220, 130, 0.1);
                border-color: rgba(0, 220, 130, 0.4);
            }

            .utm-link-icon {
                font-size: 1.5rem;
            }

            .utm-link-label {
                font-weight: 700;
                color: var(--text);
                min-width: 80px;
            }

            .utm-link {
                color: var(--accent);
                text-decoration: none;
                font-size: 0.9rem;
                word-break: break-all;
                flex: 1;
            }

            .utm-link:hover {
                text-decoration: underline;
            }

            .filters {
                background: var(--bg-card);
                padding: 24px;
                border-radius: 16px;
                margin-bottom: 30px;
                border: 1px solid var(--border);
                display: flex;
                gap: 16px;
                align-items: end;
                flex-wrap: wrap;
            }

            .filter-group {
                display: flex;
                flex-direction: column;
                gap: 8px;
                flex: 1;
                min-width: 200px;
            }

            .filter-group label {
                font-size: 0.85rem;
                color: var(--text-secondary);
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .filter-group input {
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 12px;
                color: var(--text);
                font-size: 0.95rem;
            }

            .filter-btn {
                background: var(--accent);
                color: var(--bg);
                border: none;
                padding: 12px 32px;
                border-radius: 8px;
                font-weight: 700;
                font-size: 0.95rem;
                cursor: pointer;
                transition: all 0.2s;
            }

            .filter-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 20px rgba(0, 220, 130, 0.3);
            }

            .loading {
                text-align: center;
                padding: 40px;
                color: var(--text-secondary);
            }

            .error {
                background: rgba(255, 68, 68, 0.1);
                border: 1px solid rgba(255, 68, 68, 0.3);
                padding: 24px;
                border-radius: 12px;
                color: #ff4444;
            }
        </style>
    </head>

    <body>
        <div class="container">
            <h1>ðŸ“Š Dashboard SystÃ¨me Viral</h1>

            <div class="filters">
                <div class="filter-group">
                    <label for="date-from">Date dÃ©but</label>
                    <input type="date" id="date-from" />
                </div>
                <div class="filter-group">
                    <label for="date-to">Date fin</label>
                    <input type="date" id="date-to" />
                </div>
                <button class="filter-btn" onclick="applyFilters()"
                    >Appliquer</button
                >
            </div>

            <div id="stats-container">
                <div class="loading">Chargement...</div>
            </div>

            <div id="sources-container">
                <div class="loading">Chargement des sources...</div>
            </div>

            <div id="avatars-container">
                <div class="loading">Chargement des avatars...</div>
            </div>

            <div id="utm-links-container">
                <div class="section">
                    <h2 class="section-title">ðŸ“‹ Liens UTM PrÃªts Ã  Utiliser</h2>
                    <p
                        style="text-align: center; color: var(--text-secondary); margin-bottom: 24px;"
                    >
                        Copie ces liens pour tes partages sur les rÃ©seaux
                        sociaux
                    </p>
                    <div class="utm-links">
                        <div class="utm-link-item">
                            <span class="utm-link-icon">ðŸŽµ</span>
                            <span class="utm-link-label">TikTok:</span>
                            <a href="https://systemeviral.com/accueil?utm_source=tiktok&utm_medium=social&utm_campaign=systÃ¨me_viral" target="_blank" class="utm-link">
                                https://systemeviral.com/accueil?utm_source=tiktok&utm_medium=social&utm_campaign=systÃ¨me_viral
                            </a>
                        </div>
                        <div class="utm-link-item">
                            <span class="utm-link-icon">ðŸ“º</span>
                            <span class="utm-link-label">YouTube:</span>
                            <a href="https://systemeviral.com/accueil?utm_source=youtube&utm_medium=social&utm_campaign=systÃ¨me_viral" target="_blank" class="utm-link">
                                https://systemeviral.com/accueil?utm_source=youtube&utm_medium=social&utm_campaign=systÃ¨me_viral
                            </a>
                        </div>
                        <div class="utm-link-item">
                            <span class="utm-link-icon">ðŸ“¸</span>
                            <span class="utm-link-label">Instagram:</span>
                            <a href="https://systemeviral.com/accueil?utm_source=instagram&utm_medium=social&utm_campaign=systÃ¨me_viral" target="_blank" class="utm-link">
                                https://systemeviral.com/accueil?utm_source=instagram&utm_medium=social&utm_campaign=systÃ¨me_viral
                            </a>
                        </div>
                        <div class="utm-link-item">
                            <span class="utm-link-icon">ðŸ‘¥</span>
                            <span class="utm-link-label">Facebook:</span>
                            <a href="https://systemeviral.com/accueil?utm_source=facebook&utm_medium=social&utm_campaign=systÃ¨me_viral" target="_blank" class="utm-link">
                                https://systemeviral.com/accueil?utm_source=facebook&utm_medium=social&utm_campaign=systÃ¨me_viral
                            </a>
                        </div>
                        <div class="utm-link-item">
                            <span class="utm-link-icon">ðŸ“§</span>
                            <span class="utm-link-label">Email:</span>
                            <a href="https://systemeviral.com/accueil?utm_source=email&utm_medium=email&utm_campaign=systÃ¨me_viral" target="_blank" class="utm-link">
                                https://systemeviral.com/accueil?utm_source=email&utm_medium=email&utm_campaign=systÃ¨me_viral
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let dateFilter = { from: null, to: null };

            function getDateFilter() {
                const fromInput = document.getElementById("date-from");
                const toInput = document.getElementById("date-to");
                return {
                    from: fromInput.value || null,
                    to: toInput.value || null,
                };
            }

            function filterByDate(data, from, to) {
                if (!from && !to) return data;

                const fromDate = from ? new Date(from) : null;
                const toDate = to ? new Date(to + "T23:59:59") : null;

                return data.filter((item) => {
                    const itemDate = new Date(item.timestamp);
                    if (fromDate && itemDate < fromDate) return false;
                    if (toDate && itemDate > toDate) return false;
                    return true;
                });
            }

            async function loadData() {
                try {
                    const response = await fetch(
                        "/.netlify/functions/get-journeys",
                    );
                    const data = await response.json();

                    const allEvents = data.journeys.flatMap(
                        (j) => j.steps || [],
                    );
                    const filteredEvents = filterByDate(
                        allEvents,
                        dateFilter.from,
                        dateFilter.to,
                    );

                    displayStats(filteredEvents);
                    displaySources(filteredEvents);
                    displayAvatars(filteredEvents);
                } catch (error) {
                    document.getElementById("stats-container").innerHTML =
                        `<div class="error">Erreur: ${error.message}</div>`;
                }
            }

            function displayStats(events) {
                const totalVisits = events.length;
                const optins = events.filter((e) => e.event === "optin");
                const optinRate =
                    totalVisits > 0
                        ? ((optins.length / totalVisits) * 100).toFixed(1)
                        : 0;

                document.getElementById("stats-container").innerHTML = `
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-label">Visites Total</div>
                            <div class="stat-value">${totalVisits}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Optins</div>
                            <div class="stat-value">${optins.length}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Taux Conversion</div>
                            <div class="stat-value">${optinRate}%</div>
                        </div>
                    </div>
                `;
            }

            let sourcesChart = null;

            function displaySources(events) {
                const sources = {};

                events.forEach((event) => {
                    const source = event.utm_source || "direct";
                    if (!sources[source]) {
                        sources[source] = 0;
                    }
                    sources[source]++;
                });

                const sourcesArray = Object.entries(sources)
                    .sort((a, b) => b[1] - a[1])
                    .map(([name, count]) => ({ name, count }));

                document.getElementById("sources-container").innerHTML = `
                    <div class="section">
                        <h2 class="section-title">Sources de Trafic (UTM)</h2>
                        <p style="text-align: center; color: var(--text-secondary); margin-bottom: 24px;">
                            RÃ©partition des visiteurs par rÃ©seau social
                        </p>
                        <div class="chart-container">
                            <canvas id="sourcesChart"></canvas>
                        </div>
                    </div>
                `;

                // CrÃ©er le graphique en barres
                setTimeout(() => {
                    const ctx = document.getElementById("sourcesChart");
                    if (ctx) {
                        // DÃ©truire le graphique prÃ©cÃ©dent s'il existe
                        if (sourcesChart) {
                            sourcesChart.destroy();
                        }

                        sourcesChart = new Chart(ctx, {
                            type: "bar",
                            data: {
                                labels: sourcesArray.map((s) => s.name),
                                datasets: [
                                    {
                                        label: "Nombre de visiteurs",
                                        data: sourcesArray.map((s) => s.count),
                                        backgroundColor: [
                                            "rgba(0, 220, 130, 0.8)",
                                            "rgba(0, 245, 142, 0.8)",
                                            "rgba(0, 255, 148, 0.8)",
                                            "rgba(0, 200, 120, 0.8)",
                                            "rgba(0, 230, 135, 0.8)",
                                        ],
                                        borderColor: [
                                            "#00dc82",
                                            "#00f58e",
                                            "#00ff94",
                                            "#00c878",
                                            "#00e687",
                                        ],
                                        borderWidth: 2,
                                        borderRadius: 8,
                                    },
                                ],
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        display: false,
                                    },
                                    tooltip: {
                                        backgroundColor:
                                            "rgba(10, 10, 10, 0.95)",
                                        titleColor: "#ffffff",
                                        bodyColor: "#00dc82",
                                        borderColor: "#00dc82",
                                        borderWidth: 1,
                                        padding: 12,
                                        displayColors: true,
                                        callbacks: {
                                            label: function (context) {
                                                return (
                                                    "Visiteurs: " +
                                                    context.parsed.y
                                                );
                                            },
                                        },
                                    },
                                },
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        ticks: {
                                            color: "#ffffff",
                                            font: {
                                                family: "Inter",
                                                size: 12,
                                            },
                                        },
                                        grid: {
                                            color: "rgba(255, 255, 255, 0.06)",
                                        },
                                    },
                                    x: {
                                        ticks: {
                                            color: "#ffffff",
                                            font: {
                                                family: "Inter",
                                                size: 12,
                                            },
                                        },
                                        grid: {
                                            display: false,
                                        },
                                    },
                                },
                            },
                        });
                    }
                }, 100);
            }

            let avatarChart = null;

            function displayAvatars(events) {
                const avatars = {
                    "employe-frustre": 0,
                    "influenceur-fauche": 0,
                    "entrepreneur-invisible": 0,
                };

                events
                    .filter((e) => e.event === "avatar_click")
                    .forEach((event) => {
                        const avatar = event.data?.avatar;
                        if (avatar && avatars[avatar]) {
                            avatars[avatar]++;
                        }
                    });

                const totalClicks = Object.values(avatars).reduce(
                    (a, b) => a + b,
                    0,
                );

                // Noms franÃ§ais pour les avatars
                const avatarNames = {
                    "employe-frustre": "EmployÃ© frustrÃ©",
                    "influenceur-fauche": "Influenceur fauchÃ©",
                    "entrepreneur-invisible": "Entrepreneur invisible",
                };

                document.getElementById("avatars-container").innerHTML = `
                    <div class="section">
                        <h2 class="section-title">Proportion des 3 Avatars</h2>
                        <p style="text-align: center; color: var(--text-secondary); margin-bottom: 24px;">
                            Total clics: ${totalClicks}
                        </p>
                        <div class="chart-container">
                            <canvas id="avatarChart"></canvas>
                        </div>
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 16px; margin-top: 24px;">
                            <div class="avatar-card">
                                <div class="avatar-name">${avatarNames["employe-frustre"]}</div>
                                <div class="avatar-count">${avatars["employe-frustre"]}</div>
                            </div>
                            <div class="avatar-card">
                                <div class="avatar-name">${avatarNames["influenceur-fauche"]}</div>
                                <div class="avatar-count">${avatars["influenceur-fauche"]}</div>
                            </div>
                            <div class="avatar-card">
                                <div class="avatar-name">${avatarNames["entrepreneur-invisible"]}</div>
                                <div class="avatar-count">${avatars["entrepreneur-invisible"]}</div>
                            </div>
                        </div>
                    </div>
                `;

                // CrÃ©er le graphique en camembert
                setTimeout(() => {
                    const ctx = document.getElementById("avatarChart");
                    if (ctx) {
                        // DÃ©truire le graphique prÃ©cÃ©dent s'il existe
                        if (avatarChart) {
                            avatarChart.destroy();
                        }

                        avatarChart = new Chart(ctx, {
                            type: "pie",
                            data: {
                                labels: [
                                    avatarNames["employe-frustre"],
                                    avatarNames["influenceur-fauche"],
                                    avatarNames["entrepreneur-invisible"],
                                ],
                                datasets: [
                                    {
                                        data: [
                                            avatars["employe-frustre"],
                                            avatars["influenceur-fauche"],
                                            avatars["entrepreneur-invisible"],
                                        ],
                                        backgroundColor: [
                                            "rgba(0, 220, 130, 0.8)",
                                            "rgba(0, 245, 142, 0.8)",
                                            "rgba(0, 255, 148, 0.8)",
                                        ],
                                        borderColor: [
                                            "#00dc82",
                                            "#00f58e",
                                            "#00ff94",
                                        ],
                                        borderWidth: 2,
                                    },
                                ],
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: "bottom",
                                        labels: {
                                            color: "#ffffff",
                                            font: {
                                                family: "Inter",
                                                size: 12,
                                            },
                                            padding: 15,
                                        },
                                    },
                                    tooltip: {
                                        backgroundColor:
                                            "rgba(10, 10, 10, 0.95)",
                                        titleColor: "#ffffff",
                                        bodyColor: "#00dc82",
                                        borderColor: "#00dc82",
                                        borderWidth: 1,
                                        padding: 12,
                                        displayColors: true,
                                        callbacks: {
                                            label: function (context) {
                                                const total =
                                                    context.dataset.data.reduce(
                                                        (a, b) => a + b,
                                                        0,
                                                    );
                                                const percentage = (
                                                    (context.parsed / total) *
                                                    100
                                                ).toFixed(1);
                                                return (
                                                    context.label +
                                                    ": " +
                                                    context.parsed +
                                                    " (" +
                                                    percentage +
                                                    "%)"
                                                );
                                            },
                                        },
                                    },
                                },
                            },
                        });
                    }
                }, 100);
            }

            function applyFilters() {
                dateFilter = getDateFilter();
                loadData();
            }

            // Charger au dÃ©marrage
            loadData();

            // Recharger toutes les 10 secondes
            setInterval(loadData, 10000);
        </script>
    </body>
</html>
